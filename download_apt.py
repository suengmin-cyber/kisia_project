# -*- coding: utf-8 -*-
"""download_apt

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-7f26YeFWo77hlIAfvpYU3jxD4d5OmIi
"""

# 일정 시간 지나면 or git commint이 오면 돌리도록 만들 면 될 듯

!pip install beautifulsoup4
!pip install python-magic

import requests
from bs4 import BeautifulSoup
import json

import glob

import magic

# Load APT report metadata into JSON container
APT_reports = load_notes()

# Process each report based on obtained metadata
for report in APT_reports:
  report_date = report['Date']
  report_title = report['Title']
  report_year = report['Year']
  report_source = report['Source']
  report_link = report['Link']
  report_filename = report['Filename']
  report_sha1 = report['SHA-1']

  try:
    # Download Box Splash/Preview page for file
    report_splash = requests.get(report_link).text
    file_url = get_download_url(report_splash)

    # Ensure directory exists
    os.makedirs(report_year, exist_ok=True)

    # Set hash check
    hash_check = hashlib.sha1()

    path = '/content/drive/MyDrive/KISIA /프로젝트/Documet_db/APTnote/'
    # Set download path
    download_path = os.path.join(path, report_filename)

    if report_already_downloaded(download_path):
        print("[+] File {} already exists".format(report_filename))
        continue
    else:
        # Stream download the file
        report_file = requests.get(file_url, stream=True)

        # Download file to desired path in chunks
        with open(download_path, 'wb') as f:
            for chunk in report_file.iter_content(chunk_size=1024):
                if chunk:  # filter out keep-alive new chunks
                    f.write(chunk)
                    hash_check.update(chunk)

        # Verify file contents based on expected hash value
        if hash_check.hexdigest() != report_sha1:
            os.remove(download_path)
            raise ValueError("File integrity check failed")

  except Exception as unexpected_error:
    message = "[!] Download failure for {}".format(report_filename)
    print(message, unexpected_error)

  else:
    # Verify report filetype and add extension
    download_path = verify_report_filetype(download_path)
    print("[+] Successfully downloaded {}".format(download_path))





